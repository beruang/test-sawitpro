// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Phone    string `json:"phone"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Id    int    `json:"id"`
	Token string `json:"token"`
}

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	FullName string `json:"full_name"`
	Phone    string `json:"phone"`
}

// RegistrationRequest defines model for RegistrationRequest.
type RegistrationRequest struct {
	FullName string `json:"full_name"`
	Password string `json:"password"`
	Phone    string `json:"phone"`
}

// RegistrationResponse defines model for RegistrationResponse.
type RegistrationResponse struct {
	Id int `json:"id"`
}

// UpdateRequest defines model for UpdateRequest.
type UpdateRequest struct {
	FullName string `json:"full_name"`
	Phone    string `json:"phone"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody = UpdateRequest

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegistrationRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// This will handle user login
	// (POST /login)
	Login(ctx echo.Context) error
	// This will handle get user information
	// (GET /profile)
	Profile(ctx echo.Context) error
	// This will handle update user information
	// (PUT /profile)
	UpdateProfile(ctx echo.Context) error
	// This will handle process user registration.
	// (POST /register)
	Register(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Profile converts echo context to params.
func (w *ServerInterfaceWrapper) Profile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Profile(ctx)
	return err
}

// UpdateProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProfile(ctx)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Register(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/profile", wrapper.Profile)
	router.PUT(baseURL+"/profile", wrapper.UpdateProfile)
	router.POST(baseURL+"/register", wrapper.Register)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/jNhD9K8K0RyNym/RQ3VqkBVy0QOEk6CEwCkYaS8xSJDMcOvAG+u8Lkv6MZTu7",
	"62R3gb3Z0nDmcd6bN3qC0rTWaNTsoHgCVzbYivjzDyJDY3TWaIfhgSVjkVhifN2ic6KOL3huEQpwTFLX",
	"0HUDIHzwkrCC4nYVOBksA83dPZYM3QD+NrXUY3zw6Hi3hBXOPRqqemoMwDZGv6B6Chuscx2Ase+qchOB",
	"1Iw1UjjG5h3q4xBkBcvYvuL/kplKhfvLT71S/2vR4uf0YZ1keaQPyxhr6ZgES7OfliN4TkDaLtgjBG7j",
	"/jged9nqq3BjK8H4qT05HUfdAByWniTPr8KspvJ3KAjpN8/N+t+fhlrBUMBf/13DIE12yJTewipzw2yh",
	"C4mlnppwXskSFw1MV4J/RtdR8JJV+HvjkLIrpJksA9YZkpNGQwE/nQ3PhiHSWNTCSijgPD4K/HETseYq",
	"TFtsoUmtDI2M1I0qKNIwQuoMOv7dVPMQVBrNqGO8sFbJMp7I753Ra+MKv34knEIBP+RrZ8sXtpZv+U28",
	"c4WuJGk54Y8XKwkr1CyFythkagNOIorJY2Qu6Sxe6ufh8NQgFyruQXnlyxKdm3qV0GXeJUO6GJ6fDMW2",
	"/ff1SgvPjSH5HqtQ/JcTtuBo8ZFmJC1U5pBmSBmGA2k6fNsKmkMB14102aNUKmuErhTGNq34ZFG7MHRJ",
	"bpNwNLfJigO6GnukubBqeEXyn2+Dw/TXyCx1nW4WxjeMfIh6azGM9EwoWWVWkGiRkdzXJImFYUJxu22V",
	"t5NuclAxNfJub9faWephEjze9wgmbY1N2Zze07Y3U09jLgWLdAs2mY/RL/WzvcJLab687p6b0MXw17cr",
	"fulTaszits60b++SEX/zwt/Hb5/2g3NS/ABD2r/Wx8uI15mCvi/XfQu+CgPBJqNtSG+z3Xs/VQ+7/BJn",
	"pMMlmQ+/e/uxdW/JhA4mEdNG2882ZLyS5aRLExPyuzgwntTi87jIc2VKoZqg7G7SfQgAAP//IBzQQDYP",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
